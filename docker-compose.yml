services:
  db:
    image: postgres
    user: postgres
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_APP_PASSWORD: secret
      POSTGRES_KEYCLOAK_PASSWORD: keycloak
      POSTGRES_TERRAFORM_PASSWORD: terraform
    ports:
      - "5432:5432"
    volumes:
      - type: bind
        source: postgres/db-init.sh
        target: /docker-entrypoint-initdb.d/db-init.sh
      - type: volume
        source: postgres
        target: /var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "app"]
      interval: 5s
      timeout: 3s
      retries: 3
  db-init:
    image: akring1729/fe-be-db-template-alembic:dev
    build:
      dockerfile: backend/alembic/Dockerfile
      context: .
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: app
      DB_USER: app
      DB_PASSWORD: secret
    depends_on:
      db:
        condition: service_healthy
  db-init-data:
    image: akring1729/fe-be-db-template-db-init-data:dev
    build:
      dockerfile: backend/development/Dockerfile
      context: .
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: app
      DB_USER: app
      DB_PASSWORD: secret
    depends_on:
      db-init:
        condition: service_completed_successfully
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=PathPrefix(`/auth`)"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin

      KC_HEALTH_ENABLED: "true"
      KC_HTTP_RELATIVE_PATH: "/auth"
      KC_LOG_LEVEL: INFO

      KC_DB: postgres
      KC_DB_URL_HOST: db
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
    command: start-dev
    ports:
      - "8081:8080"
      - "9000:9000"
  wait-for-keycloak:
    image: curlimages/curl:latest
    entrypoint:
      - /bin/sh
      - -c
      - |
        while true; do
          if curl --head -fsS "http://keycloak:9000/auth/health/ready"
          then
            break
          fi
          echo "Waiting for Keycloak to be ready"
          sleep 1
        done
        echo "Keycloak ready"
  keycloak-init:
    image: akring1729/fe-be-db-template-keycloak-init:dev
    build:
      dockerfile: keycloak/Dockerfile.init
      context: .
    environment:
      PGUSER: terraform
      PGPASSWORD: terraform
      PGSSLMODE: disable
      TF_VAR_keycloak_password: admin
      TF_VAR_create_user: true
      TF_VAR_valid_redirect_uris: '["http://localhost:8080/frontend/", "http://localhost:8080/frontend-nginx/"]'
      TF_VAR_user_password: bruce
    depends_on:
      wait-for-keycloak:
        condition: service_completed_successfully
  backend:
    image: akring1729/fe-be-db-template-backend:dev
    build:
      dockerfile: backend/Dockerfile
      context: .
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/backend`)"
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: app
      DB_USER: app
      DB_PASSWORD: secret
      AUTH_HOST: keycloak
      AUTH_PORT: 8080
      AUTH_HTTP_SCHEMA: http
      AUTH_REALM: app
      AUTH_CLIENT_ID: app

      ENVIRONMENT: development
    volumes:
      - type: bind
        source: backend/backend
        target: /app/backend
    ports:
      - "8082:8000"
  nginx:
    image: nginx
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend_nginx.rule=PathPrefix(`/frontend-nginx`)"
    volumes:
      - type: bind
        source: bootstrap/dist
        target: /usr/share/nginx/html/frontend-nginx
    ports:
      - "8083:80"
    profiles:
      - nginx
  webpack:
    image: akring1729/fe-be-db-template-webpack:dev
    build:
      dockerfile: bootstrap/Dockerfile
      context: .
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/frontend`)"
    volumes:
      - type: bind
        source: bootstrap/src
        target: /bootstrap/src
    ports:
      - "8084:8080"
  traefik:
    image: traefik:latest
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - --api.insecure=true
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --log.level=DEBUG
      - --accesslog
    ports:
      # The HTTP port
      - "8080:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8180:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
volumes:
  postgres:
